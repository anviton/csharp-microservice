@page "/login"
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject LoginService loginService
@inject AuthenticationStateProvider authStateProvider

<!-- Login page -->
<div class="container mt-5">
    <div class="row">
        <div class="col-lg-6 mx-auto">
            <div class="card">
                <div class="card-body">
                    <h1 class="card-title">Log in</h1>
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="needs-validation" novalidate>
                        <div class="mb-3">
                            <InputText @bind-Value="loginModel.Username" class="form-control form-control-sm" placeholder="Username" />
                            <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <InputText @bind-Value="loginModel.Password" type="password" class="form-control form-control-sm" placeholder="Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>
                        <button type="submit" class="btn btn-primary btn-sm">Log In</button>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="text-danger mt-2">@errorMessage</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var user = await loginService.AuthenticateUser(loginModel.Username, loginModel.Password);
        if (user != null)
        {
            var userClaim = await ((CustomAuthenticationStateProvider)authStateProvider).MarkUserAsAuthenticated(user);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "The user does not exist.";
        }
    }

    private class LoginModel
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }
}
