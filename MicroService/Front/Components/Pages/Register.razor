@page "/register"
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject RegisterService registerService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h1 class="card-title text-center mb-4">Register</h1>
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="needs-validation" novalidate>
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" @bind-Value="registerModel.UserName" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.UserName)" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" @bind-Value="registerModel.Email" type="email" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" @bind-Value="registerModel.Password" type="password" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-block">Register</button>
                        </div>
                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="text-center mt-3 @GetMessageClass()">@message</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string message;
    private bool erreur = false;

    private async void HandleRegister()
    {
        int user = await registerService.RegisterUser(registerModel.UserName, registerModel.Password, registerModel.Email);
        if (user == 0)
        {
            erreur = false;
            message = "User successfully created!";
        }
        else
        {
            erreur = true;
            message = user == 1 ? "User already exists." : "User registration failed.";
        }
        StateHasChanged();
    }

    private string GetMessageClass()
    {
        return erreur ? "message-error" : "message-success";
    }

    private class RegisterModel
    {
        public string UserName { get; set; } = "";
        public string Password { get; set; } = "";
        public string Email { get; set; } = "";
    }
}
