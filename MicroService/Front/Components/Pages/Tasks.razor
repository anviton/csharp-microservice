@page "/tasks"
@inject HttpClient Http
@inject TaskService taskService

<h3>Tasks</h3>

@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
else if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else if (tasks.Count == 0)
{
    <p>No tasks found for this user.</p>
}
else
{
    <ul>
        @foreach (var task in tasks)
        {
            <li>
                <span>@task.Text</span> -

                @if (task.IsDone)
                {
                    <img src="https://zupimages.net/up/24/03/w5q0.jpg" alt="Task Completed" width="30" height="30" />
                }
                else
                {
                    <img src="https://zupimages.net/up/24/03/sajj.jpg" alt="Task Uncompleted" width="30" height="30" />
                }
            </li>
        }
    </ul>
}

<div class="mb-3">
    <button class="btn btn-primary" @onclick="RefreshTasks">Refresh</button>
</div>



@code {
    private List<TaskToDo> tasks;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tasks = await taskService.GetTasks();
            errorMessage = null;
        }
        catch (Exception ex)
        {
            tasks = null; 
            errorMessage = "Unable to fetch tasks. Please try again later."; 
        }
    }

    private async Task RefreshTasks()
    {
        try
        {
            tasks = await taskService.GetTasks();
            errorMessage = null; 
        }
        catch (Exception ex)
        {
            tasks = null;
            errorMessage = "Unable to fetch tasks. Please try again later.";
        }
    }
}