@page "/tasks"
@inject HttpClient Http
@inject TaskService taskService

<!-- Task page -->
<div class="container mt-5">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <h3 class="mb-4 text-center">My ToDo List</h3>

            <!-- Add Task Form -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Add new task</h5>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Enter a new task" @bind="newTaskText">
                        <button class="btn btn-outline-success" @onclick="AddTask">Add task</button>
                    </div>
                </div>
            </div>

            <!-- Filter Section -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Filter Tasks</h5>
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">Filter by status:</label>
                                <select class="form-select" @bind="filterStatus">
                                    <option value="all">All</option>
                                    <option value="completed">Completed</option>
                                    <option value="incomplete">Not completed</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button class="btn btn-primary w-100" @onclick="ApplyFilter">Apply filter</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tasks Display -->
            @if (errorMessage != null)
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            else if (pagedTasks == null)
            {
                <p class="text-center"><em>Loading...</em></p>
            }
            else if (pagedTasks.Count == 0)
            {
                <div class="alert alert-info">No tasks found for this user.</div>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var task in pagedTasks)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <span>@task.Text</span>
                            </div>
                            <div class="ms-auto">
                                <span class="badge @GetBadgeClass(task.IsDone)">@GetBadgeText(task.IsDone)</span>
                                <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => UpdateTaskStatus(task)">
                                    <i class="fas fa-sync-alt"></i> Update status
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteTask(task.Id)">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    private List<TaskToDo> tasks;
    private List<TaskToDo> pagedTasks;
    private string newTaskText;
    private string errorMessage;
    private string filterStatus = "all";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tasks = await taskService.GetTasks();
            errorMessage = null;
            ApplyFilter();
        }
        catch (Exception ex)
        {
            tasks = null;
            pagedTasks = null;
            errorMessage = "Unable to fetch tasks. Please try again later.";
        }
    }

    private async Task RefreshTasks()
    {
        try
        {
            tasks = await taskService.GetTasks();
            errorMessage = null;
            ApplyFilter();
        }
        catch (Exception ex)
        {
            tasks = null;
            errorMessage = "Unable to fetch tasks. Please try again later.";
        }
    }

    private async Task UpdateTaskStatus(TaskToDo task)
    {
        task.IsDone = !task.IsDone;
        await taskService.UpdateTask(task);
        await RefreshTasks();
    }

    private async Task DeleteTask(int taskId)
    {
        await taskService.DeleteTask(taskId);
        await RefreshTasks();
    }

    private void ApplyFilter()
    {
        if (tasks != null)
        {
            switch (filterStatus)
            {
                case "completed":
                    pagedTasks = tasks.Where(task => task.IsDone).ToList();
                    break;
                case "incomplete":
                    pagedTasks = tasks.Where(task => !task.IsDone).ToList();
                    break;
                default:
                    pagedTasks = tasks;
                    break;
            }
        }
    }

    private string GetBadgeClass(bool isDone)
    {
        return isDone ? "bg-success text-white" : "bg-warning text-dark";
    }

    private string GetBadgeText(bool isDone)
    {
        return isDone ? "Completed" : "Not Completed";
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTaskText))
        {
            var newTask = new TaskToDo { Text = newTaskText, IsDone = false };
            bool result = await taskService.AddTask(newTask);
            if (result)
            {
                newTaskText = string.Empty;
                await RefreshTasks();
            }
            else
            {
                errorMessage = "Failed to add the task.";
            }
        }
    }
}
